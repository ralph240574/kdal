// Code generated by moshi-kotlin-codegen. Do not edit.
package com.weather.android.kdal.model

import com.squareup.moshi.JsonAdapter
import com.squareup.moshi.JsonDataException
import com.squareup.moshi.JsonReader
import com.squareup.moshi.JsonWriter
import com.squareup.moshi.Moshi
import com.squareup.moshi.Types
import java.lang.Integer
import java.lang.NullPointerException
import kotlin.Double
import kotlin.Int
import kotlin.Long
import kotlin.String
import kotlin.collections.List

class V3WxForecastDailyJsonAdapter(moshi: Moshi) : JsonAdapter<V3WxForecastDaily>() {
    private val options: JsonReader.Options =
            JsonReader.Options.of("dayOfWeek", "expirationTimeUtc", "moonPhase", "moonPhaseCode", "moonPhaseDay", "moonriseTimeLocal", "moonriseTimeUtc", "moonsetTimeLocal", "moonsetTimeUtc", "narrative", "qpf", "qpfSnow", "sunriseTimeLocal", "sunriseTimeUtc", "sunsetTimeLocal", "sunsetTimeUtc", "temperatureMax", "temperatureMin", "validTimeLocal", "validTimeUtc", "daypart")

    private val listOfStringAdapter: JsonAdapter<List<String>> =
            moshi.adapter<List<String>>(Types.newParameterizedType(List::class.java, String::class.java)).nonNull()

    private val listOfLongAdapter: JsonAdapter<List<Long>> =
            moshi.adapter<List<Long>>(Types.newParameterizedType(List::class.java, java.lang.Long::class.java)).nonNull()

    private val listOfIntAdapter: JsonAdapter<List<Int>> =
            moshi.adapter<List<Int>>(Types.newParameterizedType(List::class.java, Integer::class.java)).nonNull()

    private val listOfNullableStringAdapter: JsonAdapter<List<String?>> =
            moshi.adapter<List<String?>>(Types.newParameterizedType(List::class.java, String::class.java)).nonNull()

    private val listOfNullableLongAdapter: JsonAdapter<List<Long?>> =
            moshi.adapter<List<Long?>>(Types.newParameterizedType(List::class.java, Long::class.java)).nonNull()

    private val listOfDoubleAdapter: JsonAdapter<List<Double>> =
            moshi.adapter<List<Double>>(Types.newParameterizedType(List::class.java, java.lang.Double::class.java)).nonNull()

    private val listOfNullableIntAdapter: JsonAdapter<List<Int?>> =
            moshi.adapter<List<Int?>>(Types.newParameterizedType(List::class.java, Int::class.java)).nonNull()

    private val listOfDaypartAdapter: JsonAdapter<List<V3WxForecastDaily.Daypart>> =
            moshi.adapter<List<V3WxForecastDaily.Daypart>>(Types.newParameterizedType(List::class.java, V3WxForecastDaily.Daypart::class.java)).nonNull()

    override fun toString(): String = "GeneratedJsonAdapter(V3WxForecastDaily)"

    override fun fromJson(reader: JsonReader): V3WxForecastDaily {
        var dayOfWeek: List<String>? = null
        var expirationTimeUtc: List<Long>? = null
        var moonPhase: List<String>? = null
        var moonPhaseCode: List<String>? = null
        var moonPhaseDay: List<Int>? = null
        var moonriseTimeLocal: List<String?>? = null
        var moonriseTimeUtc: List<String?>? = null
        var moonsetTimeLocal: List<String?>? = null
        var moonsetTimeUtc: List<Long?>? = null
        var narrative: List<String>? = null
        var qpf: List<Double>? = null
        var qpfSnow: List<Double>? = null
        var sunriseTimeLocal: List<String?>? = null
        var sunriseTimeUtc: List<Long?>? = null
        var sunsetTimeLocal: List<String?>? = null
        var sunsetTimeUtc: List<Long?>? = null
        var temperatureMax: List<Int?>? = null
        var temperatureMin: List<Int>? = null
        var validTimeLocal: List<String>? = null
        var validTimeUtc: List<Long>? = null
        var daypart: List<V3WxForecastDaily.Daypart>? = null
        reader.beginObject()
        while (reader.hasNext()) {
            when (reader.selectName(options)) {
                0 -> dayOfWeek = listOfStringAdapter.fromJson(reader) ?: throw JsonDataException("Non-null value 'dayOfWeek' was null at ${reader.path}")
                1 -> expirationTimeUtc = listOfLongAdapter.fromJson(reader) ?: throw JsonDataException("Non-null value 'expirationTimeUtc' was null at ${reader.path}")
                2 -> moonPhase = listOfStringAdapter.fromJson(reader) ?: throw JsonDataException("Non-null value 'moonPhase' was null at ${reader.path}")
                3 -> moonPhaseCode = listOfStringAdapter.fromJson(reader) ?: throw JsonDataException("Non-null value 'moonPhaseCode' was null at ${reader.path}")
                4 -> moonPhaseDay = listOfIntAdapter.fromJson(reader) ?: throw JsonDataException("Non-null value 'moonPhaseDay' was null at ${reader.path}")
                5 -> moonriseTimeLocal = listOfNullableStringAdapter.fromJson(reader) ?: throw JsonDataException("Non-null value 'moonriseTimeLocal' was null at ${reader.path}")
                6 -> moonriseTimeUtc = listOfNullableStringAdapter.fromJson(reader) ?: throw JsonDataException("Non-null value 'moonriseTimeUtc' was null at ${reader.path}")
                7 -> moonsetTimeLocal = listOfNullableStringAdapter.fromJson(reader) ?: throw JsonDataException("Non-null value 'moonsetTimeLocal' was null at ${reader.path}")
                8 -> moonsetTimeUtc = listOfNullableLongAdapter.fromJson(reader) ?: throw JsonDataException("Non-null value 'moonsetTimeUtc' was null at ${reader.path}")
                9 -> narrative = listOfStringAdapter.fromJson(reader) ?: throw JsonDataException("Non-null value 'narrative' was null at ${reader.path}")
                10 -> qpf = listOfDoubleAdapter.fromJson(reader) ?: throw JsonDataException("Non-null value 'qpf' was null at ${reader.path}")
                11 -> qpfSnow = listOfDoubleAdapter.fromJson(reader) ?: throw JsonDataException("Non-null value 'qpfSnow' was null at ${reader.path}")
                12 -> sunriseTimeLocal = listOfNullableStringAdapter.fromJson(reader) ?: throw JsonDataException("Non-null value 'sunriseTimeLocal' was null at ${reader.path}")
                13 -> sunriseTimeUtc = listOfNullableLongAdapter.fromJson(reader) ?: throw JsonDataException("Non-null value 'sunriseTimeUtc' was null at ${reader.path}")
                14 -> sunsetTimeLocal = listOfNullableStringAdapter.fromJson(reader) ?: throw JsonDataException("Non-null value 'sunsetTimeLocal' was null at ${reader.path}")
                15 -> sunsetTimeUtc = listOfNullableLongAdapter.fromJson(reader) ?: throw JsonDataException("Non-null value 'sunsetTimeUtc' was null at ${reader.path}")
                16 -> temperatureMax = listOfNullableIntAdapter.fromJson(reader) ?: throw JsonDataException("Non-null value 'temperatureMax' was null at ${reader.path}")
                17 -> temperatureMin = listOfIntAdapter.fromJson(reader) ?: throw JsonDataException("Non-null value 'temperatureMin' was null at ${reader.path}")
                18 -> validTimeLocal = listOfStringAdapter.fromJson(reader) ?: throw JsonDataException("Non-null value 'validTimeLocal' was null at ${reader.path}")
                19 -> validTimeUtc = listOfLongAdapter.fromJson(reader) ?: throw JsonDataException("Non-null value 'validTimeUtc' was null at ${reader.path}")
                20 -> daypart = listOfDaypartAdapter.fromJson(reader) ?: throw JsonDataException("Non-null value 'daypart' was null at ${reader.path}")
                -1 -> {
                    // Unknown name, skip it.
                    reader.skipName()
                    reader.skipValue()
                }
            }
        }
        reader.endObject()
        var result = V3WxForecastDaily(
                dayOfWeek = dayOfWeek ?: throw JsonDataException("Required property 'dayOfWeek' missing at ${reader.path}"),
                expirationTimeUtc = expirationTimeUtc ?: throw JsonDataException("Required property 'expirationTimeUtc' missing at ${reader.path}"),
                moonPhase = moonPhase ?: throw JsonDataException("Required property 'moonPhase' missing at ${reader.path}"),
                moonPhaseCode = moonPhaseCode ?: throw JsonDataException("Required property 'moonPhaseCode' missing at ${reader.path}"),
                moonPhaseDay = moonPhaseDay ?: throw JsonDataException("Required property 'moonPhaseDay' missing at ${reader.path}"),
                moonriseTimeLocal = moonriseTimeLocal ?: throw JsonDataException("Required property 'moonriseTimeLocal' missing at ${reader.path}"),
                moonriseTimeUtc = moonriseTimeUtc ?: throw JsonDataException("Required property 'moonriseTimeUtc' missing at ${reader.path}"),
                moonsetTimeLocal = moonsetTimeLocal ?: throw JsonDataException("Required property 'moonsetTimeLocal' missing at ${reader.path}"),
                moonsetTimeUtc = moonsetTimeUtc ?: throw JsonDataException("Required property 'moonsetTimeUtc' missing at ${reader.path}"),
                narrative = narrative ?: throw JsonDataException("Required property 'narrative' missing at ${reader.path}"),
                qpf = qpf ?: throw JsonDataException("Required property 'qpf' missing at ${reader.path}"),
                qpfSnow = qpfSnow ?: throw JsonDataException("Required property 'qpfSnow' missing at ${reader.path}"),
                sunriseTimeLocal = sunriseTimeLocal ?: throw JsonDataException("Required property 'sunriseTimeLocal' missing at ${reader.path}"),
                sunriseTimeUtc = sunriseTimeUtc ?: throw JsonDataException("Required property 'sunriseTimeUtc' missing at ${reader.path}"),
                sunsetTimeLocal = sunsetTimeLocal ?: throw JsonDataException("Required property 'sunsetTimeLocal' missing at ${reader.path}"),
                sunsetTimeUtc = sunsetTimeUtc ?: throw JsonDataException("Required property 'sunsetTimeUtc' missing at ${reader.path}"),
                temperatureMax = temperatureMax ?: throw JsonDataException("Required property 'temperatureMax' missing at ${reader.path}"),
                temperatureMin = temperatureMin ?: throw JsonDataException("Required property 'temperatureMin' missing at ${reader.path}"),
                validTimeLocal = validTimeLocal ?: throw JsonDataException("Required property 'validTimeLocal' missing at ${reader.path}"),
                validTimeUtc = validTimeUtc ?: throw JsonDataException("Required property 'validTimeUtc' missing at ${reader.path}"),
                daypart = daypart ?: throw JsonDataException("Required property 'daypart' missing at ${reader.path}"))
        return result
    }

    override fun toJson(writer: JsonWriter, value: V3WxForecastDaily?) {
        if (value == null) {
            throw NullPointerException("value was null! Wrap in .nullSafe() to write nullable values.")
        }
        writer.beginObject()
        writer.name("dayOfWeek")
        listOfStringAdapter.toJson(writer, value.dayOfWeek)
        writer.name("expirationTimeUtc")
        listOfLongAdapter.toJson(writer, value.expirationTimeUtc)
        writer.name("moonPhase")
        listOfStringAdapter.toJson(writer, value.moonPhase)
        writer.name("moonPhaseCode")
        listOfStringAdapter.toJson(writer, value.moonPhaseCode)
        writer.name("moonPhaseDay")
        listOfIntAdapter.toJson(writer, value.moonPhaseDay)
        writer.name("moonriseTimeLocal")
        listOfNullableStringAdapter.toJson(writer, value.moonriseTimeLocal)
        writer.name("moonriseTimeUtc")
        listOfNullableStringAdapter.toJson(writer, value.moonriseTimeUtc)
        writer.name("moonsetTimeLocal")
        listOfNullableStringAdapter.toJson(writer, value.moonsetTimeLocal)
        writer.name("moonsetTimeUtc")
        listOfNullableLongAdapter.toJson(writer, value.moonsetTimeUtc)
        writer.name("narrative")
        listOfStringAdapter.toJson(writer, value.narrative)
        writer.name("qpf")
        listOfDoubleAdapter.toJson(writer, value.qpf)
        writer.name("qpfSnow")
        listOfDoubleAdapter.toJson(writer, value.qpfSnow)
        writer.name("sunriseTimeLocal")
        listOfNullableStringAdapter.toJson(writer, value.sunriseTimeLocal)
        writer.name("sunriseTimeUtc")
        listOfNullableLongAdapter.toJson(writer, value.sunriseTimeUtc)
        writer.name("sunsetTimeLocal")
        listOfNullableStringAdapter.toJson(writer, value.sunsetTimeLocal)
        writer.name("sunsetTimeUtc")
        listOfNullableLongAdapter.toJson(writer, value.sunsetTimeUtc)
        writer.name("temperatureMax")
        listOfNullableIntAdapter.toJson(writer, value.temperatureMax)
        writer.name("temperatureMin")
        listOfIntAdapter.toJson(writer, value.temperatureMin)
        writer.name("validTimeLocal")
        listOfStringAdapter.toJson(writer, value.validTimeLocal)
        writer.name("validTimeUtc")
        listOfLongAdapter.toJson(writer, value.validTimeUtc)
        writer.name("daypart")
        listOfDaypartAdapter.toJson(writer, value.daypart)
        writer.endObject()
    }
}
