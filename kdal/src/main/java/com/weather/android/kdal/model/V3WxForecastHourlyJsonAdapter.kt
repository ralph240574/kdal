// Code generated by moshi-kotlin-codegen. Do not edit.
package com.weather.android.kdal.model

import com.squareup.moshi.*
import java.lang.Integer
import java.lang.NullPointerException
import kotlin.Int
import kotlin.String

class V3WxForecastHourlyJsonAdapter(moshi: Moshi) : JsonAdapter<V3WxForecastHourly>() {
    private val options: JsonReader.Options =
            JsonReader.Options.of("cloudCover", "dayOfWeek", "dayOrNight", "expirationTimeUtc", "iconCode", "iconCodeExtend", "precipChance", "precipType", "pressureMeanSeaLevel", "qpf", "qpfSnow", "relativeHumidity", "temperature", "temperatureFeelsLike", "temperatureHeatIndex", "temperatureWindChill", "uvDescription", "uvIndex", "validTimeLocal", "validTimeUtc", "visibility", "windDirection", "windDirectionCardinal", "windGust", "windSpeed", "wxPhraseLong", "wxPhraseShort", "wxSeverity")

    private val listOfIntAdapter: JsonAdapter<List<Int>> =
            moshi.adapter<List<Int>>(Types.newParameterizedType(List::class.java, Integer::class.java)).nonNull()

    private val listOfStringAdapter: JsonAdapter<List<String>> =
            moshi.adapter<List<String>>(Types.newParameterizedType(List::class.java, String::class.java)).nonNull()

    private val listOfLongAdapter: JsonAdapter<List<Long>> =
            moshi.adapter<List<Long>>(Types.newParameterizedType(List::class.java, java.lang.Long::class.java)).nonNull()

    private val listOfDoubleAdapter: JsonAdapter<List<Double>> =
            moshi.adapter<List<Double>>(Types.newParameterizedType(List::class.java, java.lang.Double::class.java)).nonNull()

    private val listOfNullableIntAdapter: JsonAdapter<List<Int?>> =
            moshi.adapter<List<Int?>>(Types.newParameterizedType(List::class.java, Int::class.java)).nonNull()

    private val listOfNullableStringAdapter: JsonAdapter<List<String?>> =
            moshi.adapter<List<String?>>(Types.newParameterizedType(List::class.java, String::class.java)).nonNull()

    override fun toString(): String = "GeneratedJsonAdapter(V3WxForecastHourly)"

    override fun fromJson(reader: JsonReader): V3WxForecastHourly {
        var cloudCover: List<Int>? = null
        var dayOfWeek: List<String>? = null
        var dayOrNight: List<String>? = null
        var expirationTimeUtc: List<Long>? = null
        var iconCode: List<Int>? = null
        var iconCodeExtend: List<Int>? = null
        var precipChance: List<Int>? = null
        var precipType: List<String>? = null
        var pressureMeanSeaLevel: List<Double>? = null
        var qpf: List<Double>? = null
        var qpfSnow: List<Double>? = null
        var relativeHumidity: List<Int>? = null
        var temperature: List<Int>? = null
        var temperatureFeelsLike: List<Int>? = null
        var temperatureHeatIndex: List<Int>? = null
        var temperatureWindChill: List<Int>? = null
        var uvDescription: List<String>? = null
        var uvIndex: List<Int>? = null
        var validTimeLocal: List<String>? = null
        var validTimeUtc: List<Long>? = null
        var visibility: List<Double>? = null
        var windDirection: List<Int>? = null
        var windDirectionCardinal: List<String>? = null
        var windGust: List<Int?>? = null
        var windSpeed: List<Int>? = null
        var wxPhraseLong: List<String>? = null
        var wxPhraseShort: List<String?>? = null
        var wxSeverity: List<Int>? = null
        reader.beginObject()
        while (reader.hasNext()) {
            when (reader.selectName(options)) {
                0 -> cloudCover = listOfIntAdapter.fromJson(reader) ?: throw JsonDataException("Non-null value 'cloudCover' was null at ${reader.path}")
                1 -> dayOfWeek = listOfStringAdapter.fromJson(reader) ?: throw JsonDataException("Non-null value 'dayOfWeek' was null at ${reader.path}")
                2 -> dayOrNight = listOfStringAdapter.fromJson(reader) ?: throw JsonDataException("Non-null value 'dayOrNight' was null at ${reader.path}")
                3 -> expirationTimeUtc = listOfLongAdapter.fromJson(reader) ?: throw JsonDataException("Non-null value 'expirationTimeUtc' was null at ${reader.path}")
                4 -> iconCode = listOfIntAdapter.fromJson(reader) ?: throw JsonDataException("Non-null value 'iconCode' was null at ${reader.path}")
                5 -> iconCodeExtend = listOfIntAdapter.fromJson(reader) ?: throw JsonDataException("Non-null value 'iconCodeExtend' was null at ${reader.path}")
                6 -> precipChance = listOfIntAdapter.fromJson(reader) ?: throw JsonDataException("Non-null value 'precipChance' was null at ${reader.path}")
                7 -> precipType = listOfStringAdapter.fromJson(reader) ?: throw JsonDataException("Non-null value 'precipType' was null at ${reader.path}")
                8 -> pressureMeanSeaLevel = listOfDoubleAdapter.fromJson(reader) ?: throw JsonDataException("Non-null value 'pressureMeanSeaLevel' was null at ${reader.path}")
                9 -> qpf = listOfDoubleAdapter.fromJson(reader) ?: throw JsonDataException("Non-null value 'qpf' was null at ${reader.path}")
                10 -> qpfSnow = listOfDoubleAdapter.fromJson(reader) ?: throw JsonDataException("Non-null value 'qpfSnow' was null at ${reader.path}")
                11 -> relativeHumidity = listOfIntAdapter.fromJson(reader) ?: throw JsonDataException("Non-null value 'relativeHumidity' was null at ${reader.path}")
                12 -> temperature = listOfIntAdapter.fromJson(reader) ?: throw JsonDataException("Non-null value 'temperature' was null at ${reader.path}")
                13 -> temperatureFeelsLike = listOfIntAdapter.fromJson(reader) ?: throw JsonDataException("Non-null value 'temperatureFeelsLike' was null at ${reader.path}")
                14 -> temperatureHeatIndex = listOfIntAdapter.fromJson(reader) ?: throw JsonDataException("Non-null value 'temperatureHeatIndex' was null at ${reader.path}")
                15 -> temperatureWindChill = listOfIntAdapter.fromJson(reader) ?: throw JsonDataException("Non-null value 'temperatureWindChill' was null at ${reader.path}")
                16 -> uvDescription = listOfStringAdapter.fromJson(reader) ?: throw JsonDataException("Non-null value 'uvDescription' was null at ${reader.path}")
                17 -> uvIndex = listOfIntAdapter.fromJson(reader) ?: throw JsonDataException("Non-null value 'uvIndex' was null at ${reader.path}")
                18 -> validTimeLocal = listOfStringAdapter.fromJson(reader) ?: throw JsonDataException("Non-null value 'validTimeLocal' was null at ${reader.path}")
                19 -> validTimeUtc = listOfLongAdapter.fromJson(reader) ?: throw JsonDataException("Non-null value 'validTimeUtc' was null at ${reader.path}")
                20 -> visibility = listOfDoubleAdapter.fromJson(reader) ?: throw JsonDataException("Non-null value 'visibility' was null at ${reader.path}")
                21 -> windDirection = listOfIntAdapter.fromJson(reader) ?: throw JsonDataException("Non-null value 'windDirection' was null at ${reader.path}")
                22 -> windDirectionCardinal = listOfStringAdapter.fromJson(reader) ?: throw JsonDataException("Non-null value 'windDirectionCardinal' was null at ${reader.path}")
                23 -> windGust = listOfNullableIntAdapter.fromJson(reader) ?: throw JsonDataException("Non-null value 'windGust' was null at ${reader.path}")
                24 -> windSpeed = listOfIntAdapter.fromJson(reader) ?: throw JsonDataException("Non-null value 'windSpeed' was null at ${reader.path}")
                25 -> wxPhraseLong = listOfStringAdapter.fromJson(reader) ?: throw JsonDataException("Non-null value 'wxPhraseLong' was null at ${reader.path}")
                26 -> wxPhraseShort = listOfNullableStringAdapter.fromJson(reader) ?: throw JsonDataException("Non-null value 'wxPhraseShort' was null at ${reader.path}")
                27 -> wxSeverity = listOfIntAdapter.fromJson(reader) ?: throw JsonDataException("Non-null value 'wxSeverity' was null at ${reader.path}")
                -1 -> {
                    // Unknown name, skip it.
                    reader.skipName()
                    reader.skipValue()
                }
            }
        }
        reader.endObject()
        var result = V3WxForecastHourly(
                cloudCover = cloudCover ?: throw JsonDataException("Required property 'cloudCover' missing at ${reader.path}"),
                dayOfWeek = dayOfWeek ?: throw JsonDataException("Required property 'dayOfWeek' missing at ${reader.path}"),
                dayOrNight = dayOrNight ?: throw JsonDataException("Required property 'dayOrNight' missing at ${reader.path}"),
                expirationTimeUtc = expirationTimeUtc ?: throw JsonDataException("Required property 'expirationTimeUtc' missing at ${reader.path}"),
                iconCode = iconCode ?: throw JsonDataException("Required property 'iconCode' missing at ${reader.path}"),
                iconCodeExtend = iconCodeExtend ?: throw JsonDataException("Required property 'iconCodeExtend' missing at ${reader.path}"),
                precipChance = precipChance ?: throw JsonDataException("Required property 'precipChance' missing at ${reader.path}"),
                precipType = precipType ?: throw JsonDataException("Required property 'precipType' missing at ${reader.path}"),
                pressureMeanSeaLevel = pressureMeanSeaLevel ?: throw JsonDataException("Required property 'pressureMeanSeaLevel' missing at ${reader.path}"),
                qpf = qpf ?: throw JsonDataException("Required property 'qpf' missing at ${reader.path}"),
                qpfSnow = qpfSnow ?: throw JsonDataException("Required property 'qpfSnow' missing at ${reader.path}"),
                relativeHumidity = relativeHumidity ?: throw JsonDataException("Required property 'relativeHumidity' missing at ${reader.path}"),
                temperature = temperature ?: throw JsonDataException("Required property 'temperature' missing at ${reader.path}"),
                temperatureFeelsLike = temperatureFeelsLike ?: throw JsonDataException("Required property 'temperatureFeelsLike' missing at ${reader.path}"),
                temperatureHeatIndex = temperatureHeatIndex ?: throw JsonDataException("Required property 'temperatureHeatIndex' missing at ${reader.path}"),
                temperatureWindChill = temperatureWindChill ?: throw JsonDataException("Required property 'temperatureWindChill' missing at ${reader.path}"),
                uvDescription = uvDescription ?: throw JsonDataException("Required property 'uvDescription' missing at ${reader.path}"),
                uvIndex = uvIndex ?: throw JsonDataException("Required property 'uvIndex' missing at ${reader.path}"),
                validTimeLocal = validTimeLocal ?: throw JsonDataException("Required property 'validTimeLocal' missing at ${reader.path}"),
                validTimeUtc = validTimeUtc ?: throw JsonDataException("Required property 'validTimeUtc' missing at ${reader.path}"),
                visibility = visibility ?: throw JsonDataException("Required property 'visibility' missing at ${reader.path}"),
                windDirection = windDirection ?: throw JsonDataException("Required property 'windDirection' missing at ${reader.path}"),
                windDirectionCardinal = windDirectionCardinal ?: throw JsonDataException("Required property 'windDirectionCardinal' missing at ${reader.path}"),
                windGust = windGust ?: throw JsonDataException("Required property 'windGust' missing at ${reader.path}"),
                windSpeed = windSpeed ?: throw JsonDataException("Required property 'windSpeed' missing at ${reader.path}"),
                wxPhraseLong = wxPhraseLong ?: throw JsonDataException("Required property 'wxPhraseLong' missing at ${reader.path}"),
                wxPhraseShort = wxPhraseShort ?: throw JsonDataException("Required property 'wxPhraseShort' missing at ${reader.path}"),
                wxSeverity = wxSeverity ?: throw JsonDataException("Required property 'wxSeverity' missing at ${reader.path}"))
        return result
    }

    override fun toJson(writer: JsonWriter, value: V3WxForecastHourly?) {
        if (value == null) {
            throw NullPointerException("value was null! Wrap in .nullSafe() to write nullable values.")
        }
        writer.beginObject()
        writer.name("cloudCover")
        listOfIntAdapter.toJson(writer, value.cloudCover)
        writer.name("dayOfWeek")
        listOfStringAdapter.toJson(writer, value.dayOfWeek)
        writer.name("dayOrNight")
        listOfStringAdapter.toJson(writer, value.dayOrNight)
        writer.name("expirationTimeUtc")
        listOfLongAdapter.toJson(writer, value.expirationTimeUtc)
        writer.name("iconCode")
        listOfIntAdapter.toJson(writer, value.iconCode)
        writer.name("iconCodeExtend")
        listOfIntAdapter.toJson(writer, value.iconCodeExtend)
        writer.name("precipChance")
        listOfIntAdapter.toJson(writer, value.precipChance)
        writer.name("precipType")
        listOfStringAdapter.toJson(writer, value.precipType)
        writer.name("pressureMeanSeaLevel")
        listOfDoubleAdapter.toJson(writer, value.pressureMeanSeaLevel)
        writer.name("qpf")
        listOfDoubleAdapter.toJson(writer, value.qpf)
        writer.name("qpfSnow")
        listOfDoubleAdapter.toJson(writer, value.qpfSnow)
        writer.name("relativeHumidity")
        listOfIntAdapter.toJson(writer, value.relativeHumidity)
        writer.name("temperature")
        listOfIntAdapter.toJson(writer, value.temperature)
        writer.name("temperatureFeelsLike")
        listOfIntAdapter.toJson(writer, value.temperatureFeelsLike)
        writer.name("temperatureHeatIndex")
        listOfIntAdapter.toJson(writer, value.temperatureHeatIndex)
        writer.name("temperatureWindChill")
        listOfIntAdapter.toJson(writer, value.temperatureWindChill)
        writer.name("uvDescription")
        listOfStringAdapter.toJson(writer, value.uvDescription)
        writer.name("uvIndex")
        listOfIntAdapter.toJson(writer, value.uvIndex)
        writer.name("validTimeLocal")
        listOfStringAdapter.toJson(writer, value.validTimeLocal)
        writer.name("validTimeUtc")
        listOfLongAdapter.toJson(writer, value.validTimeUtc)
        writer.name("visibility")
        listOfDoubleAdapter.toJson(writer, value.visibility)
        writer.name("windDirection")
        listOfIntAdapter.toJson(writer, value.windDirection)
        writer.name("windDirectionCardinal")
        listOfStringAdapter.toJson(writer, value.windDirectionCardinal)
        writer.name("windGust")
        listOfNullableIntAdapter.toJson(writer, value.windGust)
        writer.name("windSpeed")
        listOfIntAdapter.toJson(writer, value.windSpeed)
        writer.name("wxPhraseLong")
        listOfStringAdapter.toJson(writer, value.wxPhraseLong)
        writer.name("wxPhraseShort")
        listOfNullableStringAdapter.toJson(writer, value.wxPhraseShort)
        writer.name("wxSeverity")
        listOfIntAdapter.toJson(writer, value.wxSeverity)
        writer.endObject()
    }
}
